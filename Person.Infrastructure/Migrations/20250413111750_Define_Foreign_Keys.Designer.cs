// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Person.Infrastructure.Data;

#nullable disable

namespace BasePerson.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250413111750_Define_Foreign_Keys")]
    partial class Define_Foreign_Keys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BasePerson.Core.Domains.PeopleRelative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConnectionType")
                        .HasColumnType("int");

                    b.Property<int>("FirstPersonId")
                        .HasColumnType("int");

                    b.Property<int>("SecondPersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstPersonId");

                    b.HasIndex("SecondPersonId");

                    b.ToTable("PeopleRelative");
                });

            modelBuilder.Entity("BasePerson.Core.Domains.PhoneRelativePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PhoneId");

                    b.ToTable("PhoneRelativePeople");
                });

            modelBuilder.Entity("Person.Core.Domains.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tbilisi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Batumi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kutaisi"
                        });
                });

            modelBuilder.Entity("Person.Core.Domains.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Person.Core.Domains.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("BasePerson.Core.Domains.PeopleRelative", b =>
                {
                    b.HasOne("Person.Core.Domains.Customer", "FirstPerson")
                        .WithMany("FirstPersonRelatives")
                        .HasForeignKey("FirstPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Person.Core.Domains.Customer", "SecondPerson")
                        .WithMany("SecondPersonRelatives")
                        .HasForeignKey("SecondPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstPerson");

                    b.Navigation("SecondPerson");
                });

            modelBuilder.Entity("BasePerson.Core.Domains.PhoneRelativePerson", b =>
                {
                    b.HasOne("Person.Core.Domains.Customer", "Person")
                        .WithMany("PhoneRelativePeople")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Person.Core.Domains.Phone", "Phone")
                        .WithMany("PhoneRelativePeople")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("Person.Core.Domains.Customer", b =>
                {
                    b.HasOne("Person.Core.Domains.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Person.Core.Domains.Phone", b =>
                {
                    b.HasOne("Person.Core.Domains.Customer", null)
                        .WithMany("Phones")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Person.Core.Domains.Customer", b =>
                {
                    b.Navigation("FirstPersonRelatives");

                    b.Navigation("PhoneRelativePeople");

                    b.Navigation("Phones");

                    b.Navigation("SecondPersonRelatives");
                });

            modelBuilder.Entity("Person.Core.Domains.Phone", b =>
                {
                    b.Navigation("PhoneRelativePeople");
                });
#pragma warning restore 612, 618
        }
    }
}
